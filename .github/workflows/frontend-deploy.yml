name: Frontend Deployment

on:
  push:
    branches: [main, develop]
    paths: ['frontend/**']
  pull_request:
    branches: [main]
    paths: ['frontend/**']

jobs:
  test-customer:
    name: Test Customer Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/customer
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/customer/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript check
        run: npm run type-check
      
      - name: Run linting
        run: npm run lint
      
      - name: Run tests
        run: npm run test --if-present
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_WS_URL: ${{ secrets.NEXT_PUBLIC_WS_URL }}

  test-admin:
    name: Test Admin Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/admin
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/admin/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript check
        run: npm run type-check
      
      - name: Run linting
        run: npm run lint
      
      - name: Run tests
        run: npm run test --if-present
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_WS_URL: ${{ secrets.NEXT_PUBLIC_WS_URL }}

  deploy-customer-vercel:
    name: Deploy Customer to Vercel
    runs-on: ubuntu-latest
    needs: test-customer
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: frontend/customer
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_CUSTOMER_PROJECT_ID }}
          working-directory: frontend/customer
          vercel-args: '--prod'

  deploy-admin-vercel:
    name: Deploy Admin to Vercel
    runs-on: ubuntu-latest
    needs: test-admin
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: frontend/admin
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_ADMIN_PROJECT_ID }}
          working-directory: frontend/admin
          vercel-args: '--prod'

  deploy-docker:
    name: Build and Deploy Docker Images
    runs-on: ubuntu-latest
    needs: [test-customer, test-admin]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push Customer Frontend
        uses: docker/build-push-action@v5
        with:
          context: frontend/customer
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/customer-frontend:latest,${{ secrets.REGISTRY_URL }}/customer-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Admin Frontend
        uses: docker/build-push-action@v5
        with:
          context: frontend/admin
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/admin-frontend:latest,${{ secrets.REGISTRY_URL }}/admin-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
      
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
