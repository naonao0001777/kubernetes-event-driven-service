apiVersion: v1
kind: Namespace
metadata:
  name: kafka
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: strimzi-cluster-operator
  namespace: kafka
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: strimzi-cluster-operator-namespaced
rules:
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "create", "delete", "patch", "update"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["rolebindings"]
  verbs: ["get", "create", "delete", "patch", "update"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: ["kafka.strimzi.io"]
  resources: ["kafkas", "kafkaconnects", "kafkatopics", "kafkausers", "kafkamirrormakers", "kafkabridges", "kafkaconnectors", "kafkamirrormaker2s", "kafkarebalances"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "delete"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["statefulsets", "replicasets"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies", "ingresses"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: strimzi-cluster-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: strimzi-cluster-operator-namespaced
subjects:
- kind: ServiceAccount
  name: strimzi-cluster-operator
  namespace: kafka
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: strimzi-cluster-operator
  namespace: kafka
data:
  log4j2.properties: |
    name = COConfig
    monitorInterval = 30

    appender.console.type = Console
    appender.console.name = STDOUT
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n

    rootLogger.level = INFO
    rootLogger.appenderRefs = stdout
    rootLogger.appenderRef.stdout.ref = STDOUT
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: strimzi-cluster-operator
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      name: strimzi-cluster-operator
  template:
    metadata:
      labels:
        name: strimzi-cluster-operator
    spec:
      serviceAccountName: strimzi-cluster-operator
      containers:
      - name: strimzi-cluster-operator
        image: quay.io/strimzi/operator:0.38.0
        env:
        - name: STRIMZI_NAMESPACE
          value: kafka
        - name: STRIMZI_FULL_RECONCILIATION_INTERVAL_MS
          value: "120000"
        - name: STRIMZI_OPERATION_TIMEOUT_MS
          value: "300000"
        - name: STRIMZI_DEFAULT_ZOOKEEPER_IMAGE
          value: quay.io/strimzi/kafka:0.38.0-kafka-3.6.0
        - name: STRIMZI_DEFAULT_KAFKA_IMAGE
          value: quay.io/strimzi/kafka:0.38.0-kafka-3.6.0
        - name: STRIMZI_DEFAULT_KAFKA_CONNECT_IMAGE
          value: quay.io/strimzi/kafka:0.38.0-kafka-3.6.0
        - name: STRIMZI_DEFAULT_KAFKA_MIRROR_MAKER_IMAGE
          value: quay.io/strimzi/kafka:0.38.0-kafka-3.6.0
        - name: STRIMZI_LOG_LEVEL
          value: INFO
        livenessProbe:
          httpGet:
            path: /healthy
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30